AWSTemplateFormatVersion: '2010-09-09'
Description: Simple API Endpoint configured using Swagger specified inline and backed
  by a Lambda function
Resources:
  LambdaInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: hightide
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:ap-southeast-2:'
          - Ref: AWS::AccountId
          - ':'
          - Ref: MyApi
          - /*/GET/hightide
    Type: AWS::Lambda::Permission
  MyApi:
    Properties:
      DefinitionBody:
        basePath: /prod
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title: HighTide
          version: '2017-05-03T04:28:50Z'
        paths:
          /hightide:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''http://tidebubble.craiggunson.com'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - Ref: AWS::Region
                    - :lambda:path/2015-03-31/functions/
                    - Fn::GetAtt:
                      - hightide
                      - Arn
                    - /invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''http://tidebubble.com'''
                    statusCode: '200'
                type: mock
        schemes:
        - https
        swagger: '2.0'
      StageName: prod
    Type: AWS::Serverless::Api
  MyServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      RoleName: MyServiceRole
    Type: AWS::IAM::Role
  hightide:
    Properties:
      CodeUri: s3://tidebubble.craiggunson.com/deploy/c66f57d410e8220d40a3a883b0530726
      Description: ''
      Handler: lambda-hightide.handler
      MemorySize: 128
      Policies: AmazonDynamoDBFullAccess
      Role:
        Fn::Sub: ${MyServiceRole.Arn}
      Runtime: nodejs6.10
      Timeout: 9
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
